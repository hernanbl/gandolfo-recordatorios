#!/usr/bin/env python3
"""
Script para simular el flujo completo de recordatorios de WhatsApp
Permite probar la funcionalidad sin esperar al cron programado
"""

import sys
import os
import json
import logging
from datetime import datetime, date, timedelta
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from db.supabase_client import supabase_client
from services.twilio.messaging import send_whatsapp_message
from utils.session_manager import save_session
import config

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/Volumes/AUDIO/gandolfo-recordatorios/logs/simulate_reminder.log', mode='a')
    ]
)

logger = logging.getLogger(__name__)

class ReminderSimulator:
    def __init__(self):
        self.supabase = supabase_client
    
    def create_test_reservation(self, test_phone="+5491123456789", hours_ahead=25):
        """
        Crea una reserva de prueba para simular recordatorio
        """
        try:
            # Crear fecha de ma√±ana 
            tomorrow = date.today() + timedelta(days=1)
            
            # Datos de reserva de prueba
            reserva_data = {
                'restaurante_id': 'e0f20795-d325-4af1-8603-1c52050048db',  # Gandolfo rest√≥
                'fecha': tomorrow.isoformat(),
                'hora': '20:00',
                'personas': 2,
                'nombre_cliente': 'Test Recordatorio Usuario',
                'telefono': test_phone,
                'email': 'test@ejemplo.com',
                'estado': 'Confirmada',
                'origen': 'test_reminder_simulation',
                'comentarios': f'Reserva de prueba para simular recordatorio - {datetime.now()}'
            }
            
            logger.info(f"üß™ CREANDO RESERVA DE PRUEBA: {reserva_data}")
            
            # Insertar en la base de datos
            result = self.supabase.table("reservas_prod").insert(reserva_data).execute()
            
            if result.data and len(result.data) > 0:
                reservation_id = result.data[0]['id']
                logger.info(f"‚úÖ RESERVA DE PRUEBA CREADA: ID {reservation_id}")
                return reservation_id, reserva_data
            else:
                logger.error("‚ùå Error: No se pudo crear la reserva de prueba")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå ERROR creando reserva de prueba: {str(e)}")
            return None, None
    
    def simulate_reminder_sending(self, reservation_id, phone_number, reserva_data):
        """
        Simula el env√≠o de recordatorio y configura la sesi√≥n correctamente
        """
        try:
            logger.info(f"üì± SIMULANDO ENV√çO DE RECORDATORIO para reserva {reservation_id}")
            
            # Obtener configuraci√≥n del restaurante desde la base de datos
            restaurant_result = self.supabase.table("restaurantes").select("*").eq('id', reserva_data['restaurante_id']).execute()
            if not restaurant_result.data:
                logger.error(f"‚ùå No se encontr√≥ el restaurante {reserva_data['restaurante_id']}")
                return False
            
            restaurant_data = restaurant_result.data[0]
            restaurant_name = restaurant_data.get('nombre', 'el restaurante')
            
            # Formatear fecha en espa√±ol para el mensaje
            fecha_obj = datetime.strptime(reserva_data['fecha'], "%Y-%m-%d").date()
            
            # Mapeo de d√≠as en espa√±ol (igual que en reservation_handler.py)
            DIAS_SEMANA = {
                'Monday': 'lunes', 'Tuesday': 'martes', 'Wednesday': 'mi√©rcoles',
                'Thursday': 'jueves', 'Friday': 'viernes', 'Saturday': 's√°bado', 'Sunday': 'domingo'
            }
            
            MESES = {
                'January': 'enero', 'February': 'febrero', 'March': 'marzo', 'April': 'abril',
                'May': 'mayo', 'June': 'junio', 'July': 'julio', 'August': 'agosto',
                'September': 'septiembre', 'October': 'octubre', 'November': 'noviembre', 'December': 'diciembre'
            }
            
            # Formatear fecha en espa√±ol
            dia_semana_en = fecha_obj.strftime("%A")
            mes_en = fecha_obj.strftime("%B")
            dia = fecha_obj.strftime("%d")
            a√±o = fecha_obj.strftime("%Y")
            
            dia_semana_es = DIAS_SEMANA.get(dia_semana_en, dia_semana_en.lower())
            mes_es = MESES.get(mes_en, mes_en.lower())
            fecha_formateada = f"{dia_semana_es} {dia} de {mes_es} de {a√±o}"
            
            # üî• CR√çTICO: Configurar sesi√≥n EXACTAMENTE como lo hace el sistema real
            session_data = {
                'reminder_data': {
                    'reserva_id': reservation_id,  # CR√çTICO: Usar 'reserva_id' no 'reservation_id'
                    'reservation_id': reservation_id,  # Mantener ambos por compatibilidad
                    'restaurant_id': reserva_data['restaurante_id'],
                    'is_reminder': True,  # CR√çTICO: El sistema busca este campo
                    'confirmation_pending': True,
                    'sent_at': datetime.now().isoformat()
                },
                'waiting_for_reminder_response': True,
                'last_interaction': datetime.now().isoformat()
            }
            
            # Guardar sesi√≥n con los datos de recordatorio
            save_session(phone_number, session_data, reserva_data['restaurante_id'])
            
            logger.info(f"üíæ SESI√ìN CONFIGURADA: {session_data}")
            
            # Crear mensaje de recordatorio (igual que en recordatorio_service.py)
            primer_nombre = reserva_data['nombre_cliente'].split()[0]
            
            mensaje = f"üîî **Recordatorio de Reserva**\n\n"
            mensaje += f"Hola {primer_nombre}! üëã\n\n"
            mensaje += f"Te recordamos tu reserva en {restaurant_name}:\n\n"
            mensaje += f"üìÖ **{fecha_formateada}**\n"
            mensaje += f"üïó **{reserva_data['hora']}**\n" 
            mensaje += f"üë• **{reserva_data['personas']} persona{'s' if reserva_data['personas'] > 1 else ''}**\n\n"
            mensaje += "Por favor confirma tu asistencia:\n\n"
            mensaje += "‚úÖ Responde **1** para CONFIRMAR\n"
            mensaje += "‚ùå Responde **2** para CANCELAR\n\n"
            mensaje += "¬°Esperamos verte pronto! üòä"
            
            # Enviar mensaje de recordatorio
            logger.info(f"üì§ ENVIANDO RECORDATORIO: {mensaje}")
            success = send_whatsapp_message(phone_number, mensaje, restaurant_data)
            
            if success:
                logger.info(f"‚úÖ RECORDATORIO ENVIADO EXITOSAMENTE")
                logger.info(f"üéØ LISTO PARA PRUEBA: Env√≠a '1' o '2' desde {phone_number} para probar")
                return True
            else:
                logger.error(f"‚ùå ERROR enviando recordatorio")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå ERROR simulando recordatorio: {str(e)}")
            return False
    
    def test_manual_response(self, phone_number, response_message):
        """
        Simula una respuesta manual para probar el webhook
        """
        try:
            logger.info(f"üß™ SIMULANDO RESPUESTA MANUAL: {phone_number} -> '{response_message}'")
            
            # Hacer una petici√≥n POST simulada al webhook
            import requests
            
            webhook_url = "https://your-app.render.com/webhook/whatsapp"  # Cambiar por tu URL real
            
            # Simular el payload que Twilio env√≠a
            webhook_data = {
                'From': phone_number,
                'Body': response_message,
                'MessageSid': f'test_sid_{datetime.now().timestamp()}',
                'AccountSid': 'test_account_sid'
            }
            
            logger.info(f"üì§ ENVIANDO AL WEBHOOK: {webhook_data}")
            
            # Hacer la petici√≥n (opcional, para apps en producci√≥n)
            # response = requests.post(webhook_url, data=webhook_data)
            # logger.info(f"üì• RESPUESTA WEBHOOK: {response.status_code} - {response.text}")
            
            logger.info("üéØ RESPUESTA SIMULADA ENVIADA - Revisa los logs del webhook")
            
        except Exception as e:
            logger.error(f"‚ùå ERROR simulando respuesta: {str(e)}")
    
    def cleanup_test_reservation(self, reservation_id):
        """
        Limpia la reserva de prueba despu√©s del test
        """
        try:
            if reservation_id:
                logger.info(f"üßπ LIMPIANDO RESERVA DE PRUEBA: {reservation_id}")
                result = self.supabase.table("reservas_prod").delete().eq('id', reservation_id).execute()
                if result.data:
                    logger.info(f"‚úÖ RESERVA DE PRUEBA ELIMINADA")
                else:
                    logger.warning(f"‚ö†Ô∏è No se pudo eliminar la reserva de prueba")
        except Exception as e:
            logger.error(f"‚ùå ERROR limpiando reserva: {str(e)}")

def main():
    print("üß™ SIMULADOR DE RECORDATORIOS DE WHATSAPP")
    print("="*50)
    
    simulator = ReminderSimulator()
    
    # Solicitar n√∫mero de tel√©fono
    test_phone = input("üì± Ingresa el n√∫mero de WhatsApp para la prueba (ej: +5491123456789): ").strip()
    if not test_phone:
        test_phone = "+5491123456789"  # N√∫mero por defecto
    
    print(f"\nüöÄ Iniciando simulaci√≥n con {test_phone}")
    
    # Paso 1: Crear reserva de prueba
    print("\nüìã PASO 1: Creando reserva de prueba...")
    reservation_id, reserva_data = simulator.create_test_reservation(test_phone)
    
    if not reservation_id:
        print("‚ùå No se pudo crear la reserva de prueba")
        return
    
    print(f"‚úÖ Reserva de prueba creada: ID {reservation_id}")
    
    # Paso 2: Simular env√≠o de recordatorio
    print("\nüì± PASO 2: Simulando env√≠o de recordatorio...")
    success = simulator.simulate_reminder_sending(reservation_id, test_phone, reserva_data)
    
    if not success:
        print("‚ùå No se pudo simular el recordatorio")
        simulator.cleanup_test_reservation(reservation_id)
        return
    
    print("‚úÖ Recordatorio simulado enviado")
    
    # Paso 3: Instrucciones para el usuario
    print("\nüéØ PASO 3: PRUEBA INTERACTIVA")
    print("-" * 30)
    print(f"1. Env√≠a un mensaje desde {test_phone} con '1' para confirmar")
    print(f"2. O env√≠a '2' para cancelar")
    print("3. Observa los logs del webhook para ver si se detecta correctamente")
    print("4. Verifica si se actualiza el estado de la reserva en la base de datos")
    
    # Opci√≥n para simulaci√≥n autom√°tica
    print("\nü§ñ OPCI√ìN AUTOM√ÅTICA:")
    auto_test = input("¬øQuieres simular autom√°ticamente una respuesta? (y/n): ").strip().lower()
    
    if auto_test == 'y':
        response = input("Ingresa la respuesta a simular (1 o 2): ").strip()
        simulator.test_manual_response(test_phone, response)
    
    # Preguntar si limpiar
    print("\nüßπ LIMPIEZA:")
    cleanup = input("¬øQuieres eliminar la reserva de prueba? (y/n): ").strip().lower()
    
    if cleanup == 'y':
        simulator.cleanup_test_reservation(reservation_id)
    else:
        print(f"üìå Reserva de prueba conservada: ID {reservation_id}")
    
    print("\n‚úÖ Simulaci√≥n completada!")
    print("üîç Revisa los logs en /logs/simulate_reminder.log para m√°s detalles")

if __name__ == "__main__":
    main()
