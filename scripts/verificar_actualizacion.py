#!/usr/bin/env python3
"""
Script para probar que el sistema de recordatorios funcione despu√©s de actualizar
el n√∫mero de Twilio a sandbox (+14155238886)
"""

import sys
import os
from datetime import datetime, timedelta

# A√±adir el directorio ra√≠z al path para poder importar m√≥dulos del proyecto
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def verificar_configuracion():
    """Verificar que la configuraci√≥n est√© actualizada"""
    print("üîß VERIFICANDO CONFIGURACI√ìN ACTUALIZADA")
    print("=" * 50)
    
    try:
        from config import TWILIO_WHATSAPP_NUMBER, TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN
        
        print(f"üì± TWILIO_WHATSAPP_NUMBER: {TWILIO_WHATSAPP_NUMBER}")
        
        if TWILIO_WHATSAPP_NUMBER == "+14155238886":
            print("‚úÖ N√∫mero de sandbox configurado correctamente")
        elif TWILIO_WHATSAPP_NUMBER == "+18059093442":
            print("‚ùå A√∫n usando n√∫mero de producci√≥n - verificar que Render se haya actualizado")
            return False
        else:
            print(f"‚ö†Ô∏è  N√∫mero inesperado: {TWILIO_WHATSAPP_NUMBER}")
            return False
        
        if TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN:
            print("‚úÖ Credenciales de Twilio configuradas")
        else:
            print("‚ùå Faltan credenciales de Twilio")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {str(e)}")
        return False

def verificar_conexion_twilio():
    """Verificar conexi√≥n con Twilio"""
    print("\nüîó VERIFICANDO CONEXI√ìN CON TWILIO")
    print("=" * 50)
    
    try:
        from config import TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN
        from twilio.rest import Client
        
        client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
        account = client.api.accounts(TWILIO_ACCOUNT_SID).fetch()
        
        print(f"‚úÖ Conexi√≥n exitosa con Twilio")
        print(f"   Cuenta: {account.friendly_name}")
        print(f"   Status: {account.status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando con Twilio: {str(e)}")
        return False

def probar_formato_mensaje():
    """Probar formato de mensaje sin enviar"""
    print("\nüß™ PROBANDO FORMATO DE MENSAJE")
    print("=" * 50)
    
    try:
        # Simular datos de una reserva
        reserva_test = {
            'id': 'test-123',
            'fecha': '2025-06-25',
            'hora': '20:00',
            'personas': 4,
            'nombre_cliente': 'Cliente Test',
            'telefono': '+5491166686255',
            'restaurante_id': 'test-restaurant'
        }
        
        # Formatear n√∫meros como lo hace el sistema
        phone_clean = reserva_test['telefono'].replace('+', '').replace(' ', '').replace('-', '')
        
        if not phone_clean.startswith('549'):
            if phone_clean.startswith('54'):
                phone_clean = f"9{phone_clean[2:]}"
            else:
                phone_clean = f"549{phone_clean}"
        
        from_number = "whatsapp:+14155238886"  # Sandbox
        to_number = f"whatsapp:+{phone_clean}"
        
        print(f"üì± N√∫mero de origen (sandbox): {from_number}")
        print(f"üì± N√∫mero de destino: {to_number}")
        
        # Verificar formatos
        if from_number == "whatsapp:+14155238886":
            print("‚úÖ Formato de origen correcto (sandbox)")
        else:
            print("‚ùå Formato de origen incorrecto")
            return False
        
        if to_number.startswith("whatsapp:+549"):
            print("‚úÖ Formato de destino correcto (Argentina)")
        else:
            print("‚ùå Formato de destino incorrecto")
            return False
        
        # Simular mensaje
        mensaje = f"""¬°Hola {reserva_test['nombre_cliente']}! üëã

Te recordamos tu reserva para ma√±ana en Gandolfo Rest√≥:

üìÖ *Fecha:* 25/06/2025
üïí *Hora:* {reserva_test['hora']} hs
üë• *Personas:* {reserva_test['personas']}

Responde con *1* para CONFIRMAR o *2* para CANCELAR tu reserva.

¬°Te esperamos! üçΩÔ∏è"""
        
        print(f"\nüìù Mensaje preparado:")
        print(f"   Longitud: {len(mensaje)} caracteres")
        print(f"   Primeras l√≠neas: {mensaje[:100]}...")
        
        print("\n‚úÖ Formato de mensaje correcto")
        return True
        
    except Exception as e:
        print(f"‚ùå Error preparando formato: {str(e)}")
        return False

def verificar_sandbox_status():
    """Informaci√≥n sobre el sandbox"""
    print("\nüìã INFORMACI√ìN DEL SANDBOX")
    print("=" * 50)
    
    print("""
üîß CONFIGURACI√ìN DEL SANDBOX:

1. ‚úÖ N√∫mero actualizado a: +14155238886
2. üì± Para recibir mensajes de prueba:
   - Enviar WhatsApp a: +14155238886
   - Mensaje: "join <c√≥digo>"
   - C√≥digo en: Twilio Console > Messaging > Try it out

3. üß™ N√∫meros que pueden recibir mensajes:
   - Solo n√∫meros registrados en el sandbox
   - Verificar en Twilio Console > Messaging > WhatsApp > Sandbox

4. üöÄ Para probar recordatorios:
   - python3 scripts/send_reminders.py
   - Verificar logs para "whatsapp:+14155238886"

‚ö†Ô∏è  IMPORTANTE:
- Si no has registrado tu n√∫mero, NO recibir√°s mensajes
- Los mensajes aparecer√°n como "enviados" pero no llegar√°n
- Para producci√≥n, cambiar a +18059093442 cuando WhatsApp Business est√© aprobado
""")

def main():
    print("üß™ VERIFICACI√ìN POST-ACTUALIZACI√ìN DE RENDER")
    print("=" * 60)
    print(f"üïí Ejecutado el: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    success = True
    
    # 1. Verificar configuraci√≥n
    if not verificar_configuracion():
        success = False
        print("\n‚ùå La configuraci√≥n no se actualiz√≥ correctamente")
        print("   Verifica que hayas cambiado TWILIO_WHATSAPP_NUMBER en AMBOS servicios:")
        print("   - Servicio web principal")
        print("   - Cron job 'daily-reminders-backup'")
        print("   Y que hayas hecho redeploy de ambos")
        return False
    
    # 2. Verificar conexi√≥n (solo si hay credenciales)
    if not verificar_conexion_twilio():
        print("‚ö†Ô∏è  No se pudo verificar conexi√≥n con Twilio (normal en desarrollo local)")
    
    # 3. Probar formato
    if not probar_formato_mensaje():
        success = False
    
    # 4. Mostrar informaci√≥n del sandbox
    verificar_sandbox_status()
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    if success:
        print("‚úÖ CONFIGURACI√ìN ACTUALIZADA CORRECTAMENTE")
        print("\nüöÄ PR√ìXIMOS PASOS:")
        print("   1. Ejecutar: python3 scripts/send_reminders.py")
        print("   2. Verificar logs para 'whatsapp:+14155238886'")
        print("   3. Registrar n√∫mero en sandbox si quieres recibir mensajes de prueba")
    else:
        print("‚ùå PROBLEMAS DETECTADOS")
        print("   Revisar configuraci√≥n en Render")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
