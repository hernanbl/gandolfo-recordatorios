import traceback
import asyncio
from datetime import datetime, timedelta
import re
import json
import random
import time
import os
from services.twilio.messaging import send_whatsapp_message
from services.twilio.utils import es_consulta_relevante, get_or_create_session, validar_paso_reserva, get_day_name
from services.twilio.reservation_handler import handle_reservation_flow, RESERVATION_STATES
from services.ai.deepseek_service import DeepSeekService
from utils.session_manager import save_session
from routes.bot import verificar_capacidad_disponible
from db.supabase_client import supabase_client
from services.reservas.db import buscar_reserva_por_telefono
import logging

logger = logging.getLogger(__name__)

# Inicializar servicio de IA
deepseek_service = DeepSeekService()

def load_restaurant_menu_json(restaurant_id):
    """Carga el men√∫ desde el archivo JSON espec√≠fico del restaurante"""
    try:
        base_dir = os.path.join(os.getcwd(), 'data', 'menus')
        menu_file_path = os.path.join(base_dir, f"{restaurant_id}_menu.json")
        
        logger.info(f"MENU_LOADER: Intentando cargar men√∫ desde: {menu_file_path}")
        
        if os.path.exists(menu_file_path):
            with open(menu_file_path, 'r', encoding='utf-8') as f:
                menu_data = json.load(f)
            logger.info(f"MENU_LOADER: Men√∫ cargado exitosamente para restaurante {restaurant_id}")
            return menu_data
        else:
            logger.warning(f"MENU_LOADER: Archivo de men√∫ no encontrado: {menu_file_path}")
            return None
    except Exception as e:
        logger.error(f"MENU_LOADER: Error al cargar men√∫ para restaurante {restaurant_id}: {str(e)}")
        return None

def load_restaurant_info_json(restaurant_id):
    """Carga la informaci√≥n desde el archivo JSON espec√≠fico del restaurante"""
    try:
        base_dir = os.path.join(os.getcwd(), 'data', 'info')
        info_file_path = os.path.join(base_dir, f"{restaurant_id}_info.json")
        
        logger.info(f"INFO_LOADER: Intentando cargar informaci√≥n desde: {info_file_path}")
        
        if os.path.exists(info_file_path):
            with open(info_file_path, 'r', encoding='utf-8') as f:
                info_data = json.load(f)
            logger.info(f"INFO_LOADER: Informaci√≥n cargada exitosamente para restaurante {restaurant_id}")
            return info_data
        else:
            logger.warning(f"INFO_LOADER: Archivo de informaci√≥n no encontrado: {info_file_path}")
            return None
    except Exception as e:
        logger.error(f"INFO_LOADER: Error al cargar informaci√≥n para restaurante {restaurant_id}: {str(e)}")
        return None

def ensure_restaurant_data_loaded(restaurant_config):
    """Asegura que los datos JSON del restaurante est√©n cargados en la configuraci√≥n"""
    restaurant_id = restaurant_config.get('id')
    if not restaurant_id:
        logger.error("CONFIG_LOADER: No se puede cargar datos - ID de restaurante faltante")
        return restaurant_config
    
    logger.info(f"CONFIG_LOADER: Asegurando datos cargados para restaurante {restaurant_id}")
    
    # Cargar men√∫ si no est√° presente o est√° vac√≠o
    menu_json = restaurant_config.get('menu_json')
    if not menu_json:
        logger.info(f"CONFIG_LOADER: Cargando men√∫ desde archivo para {restaurant_id}")
        menu_json = load_restaurant_menu_json(restaurant_id)
        if menu_json:
            restaurant_config['menu_json'] = menu_json
            logger.info(f"CONFIG_LOADER: Men√∫ cargado y agregado a config para {restaurant_id}")
    
    # Cargar informaci√≥n si no est√° presente o est√° vac√≠a
    info_json = restaurant_config.get('info_json')
    if not info_json:
        logger.info(f"CONFIG_LOADER: Cargando informaci√≥n desde archivo para {restaurant_id}")
        info_json = load_restaurant_info_json(restaurant_id)
        if info_json:
            restaurant_config['info_json'] = info_json
            logger.info(f"CONFIG_LOADER: Informaci√≥n cargada y agregada a config para {restaurant_id}")
    
    return restaurant_config

def _get_nested_value(data_dict, keys, default=None):
    """Helper para obtener valores anidados de forma segura."""
    temp_dict = data_dict
    for key in keys:
        if isinstance(temp_dict, dict):
            temp_dict = temp_dict.get(key)
        else:
            return default
    return temp_dict if temp_dict is not None else default

def get_known_user_name(from_number):
    """
    Obtiene el nombre de un usuario conocido desde sus reservas previas en Supabase.
    
    Args:
        from_number (str): N√∫mero de tel√©fono del usuario
        
    Returns:
        str: Primer nombre del usuario si es conocido, None si no
    """
    try:
        logger.info(f"üîç USUARIO LOOKUP: Buscando usuario para n√∫mero: '{from_number}'")
        
        # Normalizar n√∫mero para b√∫squeda m√°s efectiva
        # Remover prefijos y caracteres especiales
        clean_number = from_number.replace('whatsapp:', '').replace('+', '').replace(' ', '').replace('-', '')
        
        # Extraer los √∫ltimos 10 d√≠gitos (n√∫mero local argentino)
        if len(clean_number) >= 10:
            local_number = clean_number[-10:]  # √öltimos 10 d√≠gitos
            logger.info(f"üîç USUARIO LOOKUP: N√∫mero local extra√≠do: '{local_number}'")
        else:
            local_number = clean_number
        
        # Intentar b√∫squeda con diferentes formatos
        search_formats = [
            from_number,           # Formato original
            clean_number,          # Sin prefijos
            local_number,          # Solo n√∫mero local
            f"+54{local_number}",  # Con c√≥digo de pa√≠s argentino
            f"549{local_number}",  # Con c√≥digo m√≥vil argentino
        ]
        
        ultima_reserva = None
        format_found = None
        
        for search_format in search_formats:
            logger.info(f"üîç USUARIO LOOKUP: Probando formato: '{search_format}'")
            ultima_reserva = buscar_reserva_por_telefono(search_format)
            if ultima_reserva:
                format_found = search_format
                logger.info(f"‚úÖ USUARIO LOOKUP: Encontrado con formato: '{format_found}'")
                break
        
        if ultima_reserva and ultima_reserva.get('nombre_cliente'):
            nombre_completo = ultima_reserva.get('nombre_cliente', '').strip()
            if nombre_completo:
                # Extraer el primer nombre
                primer_nombre = nombre_completo.split(' ')[0]
                logger.info(f"üë§ USUARIO CONOCIDO: {from_number} (formato: {format_found}) identificado como '{primer_nombre}' desde reservas previas")
                return primer_nombre
        
        logger.info(f"üë§ USUARIO NUEVO: {from_number} no tiene reservas previas en ning√∫n formato")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo nombre de usuario conocido para {from_number}: {str(e)}")
        return None

def handle_policy_query(from_number, message, restaurant_config):
    """Funci√≥n espec√≠fica para manejar consultas sobre pol√≠ticas del restaurante - lee din√°micamente desde JSON"""
    restaurant_id = restaurant_config.get('id')
    logger.info(f"üìã POL√çTICAS: Procesando consulta sobre pol√≠ticas: '{message}' para restaurante {restaurant_id}")
    
    # Asegurar que los datos JSON est√©n cargados
    restaurant_config = ensure_restaurant_data_loaded(restaurant_config)
    
    info = restaurant_config.get('info_json', {})
    policies = info.get('policies', {})
    restaurant_name = restaurant_config.get('nombre_restaurante', 'nuestro restaurante')
    mensaje_normalizado = message.lower().replace("√°", "a").replace("√©", "e").replace("√≠", "i").replace("√≥", "o").replace("√∫", "u")

    try:
        response = f"*Informaci√≥n sobre {restaurant_name}* üìã\n\n"
        policy_found = False
        
        # Consultas sobre mascotas
        if any(word in mensaje_normalizado for word in ['mascota', 'mascotas', 'perro', 'perros', 'gato', 'gatos', 'animal', 'animales', 'pet', 'pets']):
            pets_policy = policies.get('pets', {})
            if pets_policy:
                policy_found = True
                response += f"üêï *Pol√≠tica de mascotas:*\n"
                if pets_policy.get('allowed', False):
                    restrictions = pets_policy.get('restrictions', '')
                    if restrictions:
                        response += f"Permitidas con restricciones: {restrictions}\n"
                    else:
                        response += f"Las mascotas son bienvenidas\n"
                else:
                    response += f"No se permiten mascotas\n"
                
                description = pets_policy.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre ni√±os
        elif any(word in mensaje_normalizado for word in ['ninos', 'ni√±os', 'bebe', 'beb√©', 'chico', 'chicos', 'children', 'kids']):
            children_policy = policies.get('children', {})
            if children_policy:
                policy_found = True
                response += f"üë∂ *Pol√≠tica para ni√±os:*\n"
                if children_policy.get('allowed', True):
                    description = children_policy.get('description', 'Los ni√±os son bienvenidos')
                    response += f"{description}\n"
                    amenities = children_policy.get('amenities', [])
                    if amenities:
                        response += f"Contamos con: {', '.join(amenities)}\n"
                else:
                    response += f"Restaurante orientado a adultos\n"
                response += "\n"
        
        # Consultas sobre accesibilidad
        elif any(word in mensaje_normalizado for word in ['accesibilidad', 'silla de ruedas', 'discapacidad', 'wheelchair']):
            accessibility = policies.get('accessibility', {})
            if accessibility:
                policy_found = True
                response += f"‚ôø *Accesibilidad:*\n"
                wheelchair = accessibility.get('wheelchair_accessible', False)
                braille = accessibility.get('braille_menu', False)
                response += f"‚Ä¢ Acceso para sillas de ruedas: {'S√≠' if wheelchair else 'No disponible'}\n"
                response += f"‚Ä¢ Men√∫ en braille: {'Disponible' if braille else 'No disponible'}\n"
                description = accessibility.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre dietas especiales
        elif any(word in mensaje_normalizado for word in ['vegetariano', 'vegano', 'celico', 'celiaco', 'gluten', 'tacc', 'alergias']):
            dietary = policies.get('dietary_options', {})
            if dietary:
                policy_found = True
                response += f"üå± *Opciones diet√©ticas:*\n"
                options = []
                if dietary.get('vegetarian', False):
                    options.append("vegetarianas")
                if dietary.get('vegan', False):
                    options.append("veganas")
                if dietary.get('gluten_free', False):
                    options.append("sin gluten (sin TACC)")
                
                if options:
                    response += f"Contamos con opciones {', '.join(options)}.\n"
                
                description = dietary.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre estacionamiento
        elif any(word in mensaje_normalizado for word in ['estacionamiento', 'parking', 'aparcar', 'auto', 'coche']):
            parking = policies.get('parking', {})
            if parking:
                policy_found = True
                response += f"üöó *Estacionamiento:*\n"
                if parking.get('available', False):
                    parking_type = parking.get('type', '')
                    if parking_type:
                        response += f"Tipo: {parking_type}\n"
                    description = parking.get('description', 'Estacionamiento disponible')
                    response += f"{description}\n"
                else:
                    response += f"No contamos con estacionamiento propio\n"
                response += "\n"
        
        # Consultas sobre vestimenta
        elif any(word in mensaje_normalizado for word in ['vestimenta', 'dress code', 'como vestirse', 'que ropa']):
            dress_code = policies.get('dress_code', {})
            if dress_code:
                policy_found = True
                response += f"üëî *C√≥digo de vestimenta:*\n"
                if dress_code.get('required', False):
                    style = dress_code.get('style', 'formal')
                    response += f"Se requiere vestimenta {style}\n"
                else:
                    style = dress_code.get('style', 'casual')
                    response += f"Ambiente {style}\n"
                
                description = dress_code.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre fumar
        elif any(word in mensaje_normalizado for word in ['fumar', 'fumo', 'cigarrillo', 'smoke', 'smoking', 'tabaco']):
            smoking = policies.get('smoking', {})
            if smoking:
                policy_found = True
                response += f"ÔøΩ *Pol√≠tica de fumadores:*\n"
                if smoking.get('allowed', False):
                    response += f"Se permite fumar\n"
                elif smoking.get('outdoor_allowed', False):
                    response += f"Se permite fumar solo en √°reas exteriores\n"
                else:
                    response += f"No se permite fumar\n"
                
                description = smoking.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre cancelaci√≥n
        elif any(word in mensaje_normalizado for word in ['cancelacion', 'cancelar', 'cambiar reserva', 'modificar reserva']):
            cancellation = policies.get('cancellation', {})
            if cancellation:
                policy_found = True
                response += f"üìÖ *Pol√≠tica de cancelaci√≥n:*\n"
                hours = cancellation.get('advance_notice_hours', 24)
                policy_text = cancellation.get('policy', f'Las reservas pueden cancelarse hasta {hours} horas antes')
                response += f"{policy_text}\n"
                description = cancellation.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre grupos
        elif any(word in mensaje_normalizado for word in ['grupo', 'grupos', 'evento', 'eventos', 'celebracion', 'fiesta']):
            groups = policies.get('group_reservations', {})
            if groups:
                policy_found = True
                response += f"ÔøΩ *Reservas para grupos:*\n"
                max_size = groups.get('max_size', 'sin l√≠mite espec√≠fico')
                response += f"Tama√±o m√°ximo: {max_size} personas\n"
                if groups.get('advance_booking_required', False):
                    response += f"Se requiere reserva anticipada\n"
                description = groups.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Consultas sobre ruido/ambiente
        elif any(word in mensaje_normalizado for word in ['ruido', 'ambiente', 'silencioso', 'tranquilo', 'noise']):
            noise = policies.get('noise_level', {})
            if noise:
                policy_found = True
                response += f"üîä *Ambiente del lugar:*\n"
                level = noise.get('level', 'moderado')
                response += f"Nivel de ruido: {level}\n"
                description = noise.get('description', '')
                if description:
                    response += f"{description}\n"
                response += "\n"
        
        # Si no se encontr√≥ una pol√≠tica espec√≠fica, mostrar resumen general
        if not policy_found:
            response += f"Te ayudo con cualquier consulta sobre nuestras pol√≠ticas y servicios:\n\n"
            
            # Mostrar resumen de pol√≠ticas disponibles
            if policies.get('pets', {}).get('allowed', False):
                response += f"üêï Mascotas: {policies['pets'].get('restrictions', 'Permitidas')}\n"
            
            if policies.get('children', {}).get('allowed', True):
                response += f"üë∂ Ni√±os: Bienvenidos\n"
            
            if policies.get('dietary_options', {}):
                dietary = policies['dietary_options']
                options = []
                if dietary.get('vegetarian'): options.append("vegetarianas")
                if dietary.get('vegan'): options.append("veganas") 
                if dietary.get('gluten_free'): options.append("sin gluten")
                if options:
                    response += f"üå± Dietas especiales: {', '.join(options)}\n"
            
            if policies.get('parking', {}).get('available', False):
                response += f"üöó Estacionamiento: Disponible\n"
            
            response += "\n"
        
        response += f"¬øTe gustar√≠a hacer una reserva? Responde 'Reservar' para comenzar. üìÖ"
        
        send_whatsapp_message(from_number, response, restaurant_config)
        logger.info(f"‚úÖ Consulta sobre pol√≠ticas respondida para {from_number} - Pol√≠tica encontrada: {policy_found}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error al procesar consulta de pol√≠ticas para {from_number}: {str(e)}")
        logger.error(traceback.format_exc())
        fallback_response = f"Gracias por tu consulta. Para informaci√≥n espec√≠fica sobre nuestras pol√≠ticas, no dudes en preguntarnos directamente. ¬øTe gustar√≠a hacer una reserva?"
        send_whatsapp_message(from_number, fallback_response, restaurant_config)
        return None

def handle_location_query(from_number, message, restaurant_config):
    """Funci√≥n espec√≠fica para manejar consultas sobre ubicaci√≥n"""
    restaurant_id = restaurant_config.get('id')
    logger.info(f"UBICACI√ìN: Procesando consulta sobre ubicaci√≥n: '{message}' para restaurante {restaurant_id}")
    
    # Asegurar que los datos JSON est√©n cargados
    restaurant_config = ensure_restaurant_data_loaded(restaurant_config)
    
    info = restaurant_config.get('info_json', {})
    location_info = info.get('location', {})
    contact_info = info.get('contact', {})
    restaurant_name = restaurant_config.get('nombre_restaurante', 'nuestro restaurante')
    default_phone = contact_info.get('phone', 'nuestro n√∫mero de contacto')

    try:
        address = location_info.get('address')
        if not address:
            error_response = f"""*Informaci√≥n de ubicaci√≥n* üìç\n\nNo pudimos encontrar la direcci√≥n detallada para {restaurant_name} en este momento. Por favor, cont√°ctanos directamente llamando al {default_phone} para m√°s detalles.\n\n¬øTe gustar√≠a hacer una reserva? Responde 'Reservar'."""
            send_whatsapp_message(from_number, error_response, restaurant_config)
            logger.error(f"‚ùå Error al procesar consulta de ubicaci√≥n para {from_number}: datos faltantes")
            return None

        google_maps = location_info.get('google_maps_link', '')
        google_reviews = location_info.get('google_reviews_link', '')
        parking = location_info.get('parking', '')
        reference_points = location_info.get('reference_points', [])
        
        response = f"""*¬°Hola! Gracias por tu inter√©s en {restaurant_name}* üçΩÔ∏è\n\n*Nuestra ubicaci√≥n:*\nüìç {address}\n"""
        if parking:
            response += f"üöó {parking}\n"
        if reference_points:
            response += "\n*Puntos de referencia:*\n"
            for point in reference_points:
                response += f"‚Ä¢ {point}\n"
        
        directions = info.get('directions', {})
        if directions:
            if 'auto' in directions and directions['auto']:
                response += "\n*C√≥mo llegar en auto:*\n"
                for step in directions['auto']:
                    response += f"‚Ä¢ {step}\n"
            if 'transporte_publico' in directions and directions['transporte_publico']:
                response += "\n*C√≥mo llegar en transporte p√∫blico:*\n"
                for step in directions['transporte_publico']:
                    response += f"‚Ä¢ {step}\n"
        
        if google_maps:
            response += f"\nüó∫Ô∏è *Google Maps:* {google_maps}\n"
        if google_reviews:
            response += f"\n‚≠ê *Rese√±as en Google:* {google_reviews}\n"
        
        response += f"""
¬øTe gustar√≠a hacer una reserva? Responde "Reservar" para comenzar el proceso.

Para cualquier otra consulta, estamos a tu disposici√≥n. Puedes contactarnos al {default_phone}."""
        logger.info(f"‚úÖ Consulta sobre ubicaci√≥n respondida para {from_number}")
        send_whatsapp_message(from_number, response, restaurant_config)
        return None
    except Exception as e:
        logger.error(f"‚ùå Error al procesar consulta de ubicaci√≥n para {from_number}: {str(e)}")
        logger.error(traceback.format_exc())
        error_response = f"""*Gracias por tu consulta sobre nuestra ubicaci√≥n* üìç\n\nEstamos ubicados en {location_info.get('address', 'nuestra direcci√≥n principal')}.\n\nPara indicaciones m√°s detalladas, por favor ll√°manos al {default_phone}.\n\n¬øTe gustar√≠a hacer una reserva? Responde 'Reservar' para comenzar el proceso."""
        send_whatsapp_message(from_number, error_response, restaurant_config)
        return None

def get_restaurant_uuid(restaurant_id_string):
    """
    Convierte un restaurant_id string a UUID real de Supabase
    
    Args:
        restaurant_id_string (str): ID string del restaurante (ej: 'ostende', 'gandolfo')
        
    Returns:
        str: UUID real del restaurante en Supabase
    """
    # Mapeo hardcoded de IDs string a UUIDs reales
    uuid_mapping = {
        'ostende': '6a117059-4c96-4e48-8fba-a59c71fd37cf',
        'gandolfo': 'e0f20795-d325-4af1-8603-1c52050048db',
        'elsie': '4a6f6088-61a6-44a2-aa75-5161e1f3cad1'
    }
    
    # Si ya es un UUID (contiene guiones), devolverlo tal como est√°
    if '-' in restaurant_id_string:
        return restaurant_id_string
    
    # Buscar el UUID correspondiente al ID string
    uuid_real = uuid_mapping.get(restaurant_id_string.lower())
    
    if not uuid_real:
        logger.warning(f"‚ö†Ô∏è UUID MAPPING: No se encontr√≥ UUID para restaurant_id '{restaurant_id_string}', usando ID tal como est√°")
        return restaurant_id_string
    
    logger.info(f"‚úÖ UUID MAPPING: '{restaurant_id_string}' -> {uuid_real}")
    return uuid_real

def save_feedback(from_number, message, restaurant_config, calificacion=None):
    """
    Guarda feedback del cliente en la tabla feedback de Supabase
    
    Args:
        from_number (str): N√∫mero de WhatsApp del cliente
        message (str): Mensaje de feedback del usuario
        restaurant_config (dict): Configuraci√≥n del restaurante
        calificacion (int, optional): Calificaci√≥n num√©rica del 1-5
        
    Returns:
        bool: True si se guard√≥ exitosamente, False si hubo error
    """
    try:
        logger.info(f"üíæ SAVE FEEDBACK: Guardando feedback de {from_number}")
        logger.info(f"üìù SAVE FEEDBACK: Mensaje: '{message}'")
        logger.info(f"‚≠ê SAVE FEEDBACK: Calificaci√≥n: {calificacion}")
        
        restaurant_id_string = restaurant_config.get('id')
        if not restaurant_id_string:
            logger.error("‚ùå SAVE FEEDBACK: ID de restaurante faltante")
            return False
        
        # Convertir ID string a UUID real
        restaurant_uuid = get_restaurant_uuid(restaurant_id_string)
        
        # Limpiar n√∫mero de tel√©fono (quitar prefijo whatsapp:)
        clean_phone = from_number.replace('whatsapp:', '')
        
        # üÜî BUSCAR ID DE RESERVA RECIENTE EN LA SESI√ìN
        reserva_id = None
        try:
            from utils.session_manager import get_session
            session = get_session(clean_phone, restaurant_uuid)
            if session and 'last_reservation_id' in session:
                potential_reserva_id = session['last_reservation_id']
                
                # üîç VERIFICAR QUE LA RESERVA EXISTE EN LA BASE DE DATOS
                try:
                    verify_result = supabase_client.table("reservas_prod").select("id").eq("id", potential_reserva_id).execute()
                    if verify_result.data:
                        reserva_id = potential_reserva_id
                        logger.info(f"üÜî FEEDBACK: Reserva verificada y vinculada: {reserva_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è FEEDBACK: Reserva {potential_reserva_id} no existe en BD, guardando feedback sin vincular")
                except Exception as verify_error:
                    logger.warning(f"‚ö†Ô∏è FEEDBACK: Error verificando reserva: {str(verify_error)}")
                
        except Exception as session_error:
            logger.warning(f"‚ö†Ô∏è FEEDBACK: Error buscando reserva_id en sesi√≥n: {str(session_error)}")
        
        # Preparar datos para Supabase (usando nombres de columnas correctos)
        feedback_data = {
            'restaurante_id': restaurant_uuid,  # ‚úÖ Ahora usa el UUID real
            'cliente_telefono': clean_phone,    # ‚úÖ Nombre correcto
            'comentario': message.strip(),      # ‚úÖ Nombre correcto (no 'mensaje')
            'puntuacion': calificacion,
            'fecha_feedback': datetime.now().isoformat()
        }
        
        # üÜî AGREGAR RESERVA_ID SOLO SI EXISTE Y ES V√ÅLIDO
        if reserva_id:
            feedback_data['reserva_id'] = reserva_id
        
        logger.info(f"üóÉÔ∏è SAVE FEEDBACK: Datos para Supabase: {feedback_data}")
        
        # Guardar en Supabase
        supabase = supabase_client
        if not supabase:
            logger.error("‚ùå SAVE FEEDBACK: Cliente Supabase no disponible")
            return False
        
        result = supabase.table("feedback").insert(feedback_data).execute()
        
        if result.data:
            logger.info(f"‚úÖ SAVE FEEDBACK: Feedback guardado exitosamente para {from_number}")
            logger.info(f"üìä SAVE FEEDBACK: Resultado Supabase: {result.data}")
            
            # üßπ LIMPIAR RESERVA_ID DE LA SESI√ìN (una vez usado, no reutilizar)
            if reserva_id:
                try:
                    from utils.session_manager import save_session
                    session = get_session(clean_phone, restaurant_uuid)
                    if session and 'last_reservation_id' in session:
                        del session['last_reservation_id']
                        save_session(clean_phone, session, restaurant_uuid)
                        logger.info(f"üßπ FEEDBACK: Reserva_id limpiado de la sesi√≥n")
                except Exception as cleanup_error:
                    logger.warning(f"‚ö†Ô∏è FEEDBACK: Error limpiando reserva_id de sesi√≥n: {str(cleanup_error)}")
            
            return True
        else:
            logger.error(f"‚ùå SAVE FEEDBACK: No se obtuvieron datos en la respuesta de Supabase")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå SAVE FEEDBACK: Error guardando feedback para {from_number}: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def get_menu_from_config(restaurant_config):
    """Extrae el men√∫ del restaurant_config en formato legible"""
    try:
        restaurant_name = restaurant_config.get('nombre', 'el restaurante')
        restaurant_id = restaurant_config.get('id')
        
        logger.info(f"MEN√ö: Extrayendo men√∫ para {restaurant_name} (ID: {restaurant_id})")
        
        # Primero intentar obtener el men√∫ desde menu_json (datos reales)
        menu_data = restaurant_config.get('menu_json')
        
        # Si no est√° disponible, intentar cargarlo desde archivo
        if not menu_data and restaurant_id:
            logger.info(f"MEN√ö: menu_json no disponible, cargando desde archivo para {restaurant_id}")
            menu_data = load_restaurant_menu_json(restaurant_id)
            if menu_data:
                restaurant_config['menu_json'] = menu_data  # Cachear para pr√≥ximas consultas
        
        # Fallback al m√©todo anterior como √∫ltimo recurso
        if not menu_data:
            logger.warning(f"MEN√ö: No se pudo cargar desde archivo, intentando config.menu")
            config = restaurant_config.get('config', {})
            menu_data = config.get('menu', {})
        
        logger.info(f"MEN√ö: Menu data source: {'menu_json' if restaurant_config.get('menu_json') else 'config.menu'}")
        logger.info(f"MEN√ö: Menu data available: {bool(menu_data)}")
        
        if not menu_data:
            logger.warning(f"MEN√ö: No hay datos de men√∫ disponibles para {restaurant_name}")
            return None
            
        menu_text = f"*üçΩÔ∏è Men√∫ de {restaurant_name}*\n\n"
        
        # Obtener d√≠as de la semana
        dias_semana = menu_data.get('dias_semana', {})
        logger.info(f"MEN√ö: D√≠as de semana disponibles: {list(dias_semana.keys())}")
        
        # Mostrar algunos platos destacados de diferentes d√≠as
        platos_destacados = []
        for dia, comidas in dias_semana.items():
            if isinstance(comidas, dict):
                for momento, platos in comidas.items():
                    if isinstance(platos, list):
                        for plato in platos[:2]:  # Solo los primeros 2 platos por momento
                            if isinstance(plato, dict) and 'name' in plato and 'price' in plato:
                                platos_destacados.append(f"‚Ä¢ {plato['name']} - ${plato['price']}")
        
        logger.info(f"MEN√ö: Encontrados {len(platos_destacados)} platos destacados")
        
        if platos_destacados:
            menu_text += "*üåü Algunos de nuestros platos destacados:*\n"
            menu_text += "\n".join(platos_destacados[:8])  # M√°ximo 8 platos
            menu_text += "\n\n"
        
        # Agregar informaci√≥n sobre men√∫ especial para cel√≠acos si existe
        menu_especial = menu_data.get('menu_especial', {})
        celiaco = menu_especial.get('celiaco', {})
        if celiaco:
            logger.info(f"MEN√ö: Agregando opciones sin TACC")
            menu_text += "*üåæ Opciones sin TACC disponibles*\n"
            platos_principales = celiaco.get('platos_principales', [])
            if platos_principales:
                menu_text += "Platos principales sin gluten:\n"
                for plato in platos_principales[:3]:
                    menu_text += f"‚Ä¢ {plato}\n"
            menu_text += "\n"
            
            nota = celiaco.get('nota', '')
            if nota:
                menu_text += f"‚ÑπÔ∏è *Nota:* {nota}\n\n"
        
        menu_text += "Para consultas espec√≠ficas sobre ingredientes o disponibilidad, no dudes en preguntar.\n\n"
        menu_text += "¬øTe gustar√≠a hacer una reserva? Responde 'Reservar' üìÖ"
        
        logger.info(f"MEN√ö: Men√∫ generado exitosamente - longitud final: {len(menu_text)} caracteres")
        return menu_text
        
    except Exception as e:
        logger.error(f"Error al extraer men√∫ del config: {str(e)}")
        logger.error(traceback.format_exc())
        return None

def handle_menu_query(from_number, message, restaurant_config, session):
    """Maneja consultas sobre el men√∫ usando el JSON del restaurante"""
    try:
        restaurant_name = restaurant_config.get('nombre', 'el restaurante')
        restaurant_id = restaurant_config.get('id')
        logger.info(f"MEN√ö: Procesando consulta de men√∫ para {restaurant_name} (ID: {restaurant_id}): '{message}'")
        
        # Asegurar que los datos JSON est√©n cargados
        restaurant_config = ensure_restaurant_data_loaded(restaurant_config)
        
        # Intentar obtener el men√∫ del config JSON del restaurante
        menu_response = get_menu_from_config(restaurant_config)
        
        if menu_response:
            logger.info(f"MEN√ö: Enviando men√∫ desde config JSON - longitud: {len(menu_response)} caracteres")
            send_whatsapp_message(from_number, menu_response, restaurant_config)
            logger.info(f"‚úÖ Consulta de men√∫ respondida desde config JSON para {from_number}")
            return None
        else:
            logger.warning(f"MEN√ö: No se encontr√≥ men√∫ en config para {restaurant_name}, usando fallback")
            # Fallback si no hay men√∫ en el config
            fallback_response = f"""*Men√∫ de {restaurant_name}* üçΩÔ∏è\n\nGracias por tu inter√©s en nuestro men√∫. Por el momento, te recomiendo contactarnos directamente para conocer todos los detalles de nuestros deliciosos platos.\n\nüìû Ll√°manos o vis√≠tanos para m√°s informaci√≥n.\n\n¬øTe gustar√≠a hacer una reserva? Responde 'Reservar'."""
            send_whatsapp_message(from_number, fallback_response, restaurant_config)
            logger.info(f"‚úÖ Consulta de men√∫ respondida con fallback para {from_number}")
            return None
    except Exception as e:
        logger.error(f"Error en handle_menu_query: {str(e)}")
        logger.error(traceback.format_exc())
        fallback_response = f"Gracias por preguntar sobre nuestro men√∫. Para informaci√≥n detallada, por favor cont√°ctanos directamente. ¬øTe gustar√≠a hacer una reserva?"
        send_whatsapp_message(from_number, fallback_response, restaurant_config)
        logger.error(f"‚ùå Error en consulta de men√∫ para {from_number}: {str(e)}")
        return None

def handle_ai_conversation(from_number, message, restaurant_config, session):
    """Maneja conversaci√≥n general usando IA"""
    try:
        restaurant_name = restaurant_config.get('nombre_restaurante', 'el restaurante')
        info_json = restaurant_config.get('info_json', {})
        
        # PRIMERA VERIFICACI√ìN: Detectar si es consulta de men√∫ que se escap√≥ del filtro principal
        mensaje_normalizado = message.lower().replace("√°", "a").replace("√©", "e").replace("√≠", "i").replace("√≥", "o").replace("√∫", "u")
        
        # Palabras clave adicionales para detectar consultas de men√∫
        menu_phrases = [
            'que tienen para', 'que hay de', 'cuales son los', 'me gustaria ver', 'quiero ver el',
            'muestrame el', 'pueden mostrarme', 'tienen algo', 'que me recomiendan', 'que ofrecen',
            'cual es su', 'como es su', 'tienen disponible', 'que platillos', 'que comidas',
            'me pueden decir que', 'quisiera saber que', 'me interesa el', 'informacion del menu'
        ]
        
        if any(phrase in mensaje_normalizado for phrase in menu_phrases):
            logger.info(f"MEN√ö: IA redirigiendo consulta de men√∫ detectada tard√≠amente: {message}")
            return handle_menu_query(from_number, message, restaurant_config, session)
        
        # Ejecutar de forma s√≠ncrona la funci√≥n async
        response = asyncio.run(deepseek_service.handle_general_conversation(message, info_json, restaurant_name))
        
        if response:
            # VERIFICAR si la IA est√° generando contenido de men√∫ (prevenir respuestas inventadas)
            response_lower = response.lower()
            menu_generation_indicators = [
                'nuestro menu', 'tenemos platos', 'ofrecemos', 'nuestras especialidades',
                'contamos con', 'puedes elegir', 'disponemos de', '$', 'precio', 'cuesta'
            ]
            
            if any(indicator in response_lower for indicator in menu_generation_indicators):
                logger.warning(f"MEN√ö: IA intent√≥ generar men√∫ falso, redirigiendo: {response[:100]}...")
                return handle_menu_query(from_number, message, restaurant_config, session)
            
            send_whatsapp_message(from_number, response, restaurant_config)
            logger.info(f"‚úÖ Conversaci√≥n general respondida con IA para {from_number}")
            return None
        else:
            contact_info = info_json.get('contact', {})
            restaurant_phone = contact_info.get('phone', 'nuestro n√∫mero de contacto')
            fallback_response = f"""Gracias por tu mensaje. No estoy seguro de c√≥mo ayudarte con eso espec√≠ficamente, pero estar√© encantado de asistirte con:\n\nüçΩÔ∏è *Reservas* - Escribe 'Reservar'\nüìã *Men√∫* - Escribe 'Menu'\nüìç *Ubicaci√≥n* - Escribe 'Ubicacion'\n\nPara otras consultas, puedes llamarnos al {restaurant_phone}."""
            send_whatsapp_message(from_number, fallback_response, restaurant_config)
            logger.info(f"‚úÖ Conversaci√≥n general respondida con fallback para {from_number}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Error en conversaci√≥n general para {from_number}: {str(e)}")
        contact_info = info_json.get('contact', {})
        restaurant_phone = contact_info.get('phone', 'nuestro n√∫mero de contacto')
        fallback_response = f"Gracias por tu mensaje. Para asistencia personalizada, por favor ll√°manos al {restaurant_phone}."
        send_whatsapp_message(from_number, fallback_response, restaurant_config)
        return None

def handle_whatsapp_message(message, from_number, restaurant_config, message_sid=None):
    """Procesa mensajes de WhatsApp entrantes con sistema h√≠brido (estructurado + IA)"""
    try:
        mensaje_normalizado = message.lower().replace("√°", "a").replace("√©", "e").replace("√≠", "i").replace("√≥", "o").replace("√∫", "u")
        
        if not restaurant_config:
            logger.error("‚ùå Restaurant config missing in handle_whatsapp_message")
            return None

        # CR√çTICO: Asegurar que los datos JSON est√©n cargados antes de procesar
        restaurant_config = ensure_restaurant_data_loaded(restaurant_config)

        restaurant_id = restaurant_config.get('id')
        restaurant_name = restaurant_config.get('nombre_restaurante', 'el restaurante')
        info_json = restaurant_config.get('info_json', {})
        contact_info = info_json.get('contact', {})
        restaurant_phone = contact_info.get('phone', 'nuestro n√∫mero de contacto')

        session = get_or_create_session(from_number, restaurant_id)
        
        # LOGGING DETALLADO PARA DEBUGGING
        logger.info(f"üîç HANDLER DEBUG para {from_number}:")
        logger.info(f"  üì® Mensaje: '{message}'")
        logger.info(f"  üîÑ Mensaje normalizado: '{mensaje_normalizado}'")
        logger.info(f"  üè™ Restaurante: {restaurant_name} (ID: {restaurant_id})")
        logger.info(f"  üìä Datos disponibles: menu_json={bool(restaurant_config.get('menu_json'))}, info_json={bool(restaurant_config.get('info_json'))}")
        logger.info(f"  üìä Estado sesi√≥n: {session.get('reservation_state', 'no definido')}")
        logger.info(f"  üìù Datos reserva: {session.get('reservation_data', {})}")
        logger.info(f"  ‚è∞ Timestamp sesi√≥n: {session.get('timestamp', 'no definido')}") 
        
        # PRIORIDAD M√ÅXIMA: Comandos que interrumpen cualquier flujo activo
        interrupt_commands = ['hola', 'hello', 'hi', 'menu', 'ubicacion', 'help', 'ayuda']
        # ‚úÖ FIX: Usar palabras completas para evitar falsos positivos como "hi" en "jose marchiore"
        mensaje_words = mensaje_normalizado.split()
        is_interrupt_command = mensaje_normalizado in interrupt_commands or any(cmd in mensaje_words for cmd in interrupt_commands)
        
        # ‚úÖ CR√çTICO: Detectar consultas de pol√≠ticas como comando de interrupci√≥n
        policy_keywords = [
            # Mascotas
            'mascota', 'mascotas', 'perro', 'perros', 'gato', 'gatos', 'animal', 'animales', 'pet', 'pets',
            # Ni√±os
            'ninos', 'ni√±os', 'bebe', 'beb√©', 'chico', 'chicos', 'children', 'kids', 'menores', 'familia', 'familiar',
            # Fumar
            'fumar', 'fumo', 'cigarro', 'cigarrillo', 'tabaco', 'smoke', 'smoking', 'puedo fumar', 'se puede fumar',
            'fumadores', 'zona fumadores', 'zona de fumadores',
            # Accesibilidad
            'accesibilidad', 'silla de ruedas', 'discapacidad', 'wheelchair', 'accesible',
            # Dietas (solo palabras espec√≠ficas, no gen√©ricas)
            'vegetariano', 'vegano', 'celico', 'celiaco', 'gluten', 'tacc', 'alergias', 'alergia', 'sin gluten',
            # Estacionamiento
            'estacionamiento', 'parking', 'aparcar', 'auto', 'coche', 'estacionar',
            # Espacios
            'terraza', 'patio', 'afuera', 'exterior', 'adentro', 'interior', 'salon', 'sal√≥n',
            # Vestimenta
            'vestimenta', 'dress code', 'como vestirse', 'que ropa', 'formal', 'casual', 'vestir', 'como hay que vestirse',
            # Cancelaci√≥n
            'cancelacion', 'cancelar', 'cambiar reserva', 'modificar reserva', 'pol√≠tica', 'politica',
            'politica de cancelacion', 'pol√≠tica de cancelaci√≥n',
            # Horarios y servicios (espec√≠ficos)
            'wifi', 'internet',
            # Pagos
            'pago', 'tarjeta', 'efectivo', 'mercado pago', 'transferencia', 'd√©bito', 'cr√©dito',
            # Ruido/ambiente
            'ruido', 'silencioso', 'tranquilo', 'ambiente'
        ]
        is_policy_query = any(keyword in mensaje_normalizado for keyword in policy_keywords)
        
        # Si es una consulta de pol√≠tica, act√∫a como comando de interrupci√≥n
        if is_policy_query:
            is_interrupt_command = True
            logger.info(f"üìã POL√çTICA DETECTADA: '{message}' ser√° tratada como comando de interrupci√≥n")
        
        # DETECCI√ìN Y LIMPIEZA DE ESTADOS PROBLEM√ÅTICOS
        reservation_state = session.get('reservation_state')
        is_problematic_state = False
        
        # Detectar si el bot est√° trabado esperando cantidad de personas
        if reservation_state == RESERVATION_STATES['ESPERANDO_PERSONAS'] and is_interrupt_command:
            logger.warning(f"üö® ESTADO PROBLEM√ÅTICO DETECTADO: Bot trabado esperando personas, usuario dice '{message}'")
            is_problematic_state = True
        
        # Detectar otros estados problem√°ticos donde el usuario claramente quiere otra cosa
        problematic_states = [
            RESERVATION_STATES['ESPERANDO_FECHA'],
            RESERVATION_STATES['ESPERANDO_PERSONAS'],
            RESERVATION_STATES['ESPERANDO_NOMBRE'],
            RESERVATION_STATES['ESPERANDO_TELEFONO']
        ]
        
        if reservation_state in problematic_states and is_interrupt_command:
            logger.warning(f"üö® LIMPIANDO ESTADO PROBLEM√ÅTICO: {reservation_state} interrumpido por '{message}'")
            is_problematic_state = True
        
        # Limpiar estados problem√°ticos
        if is_problematic_state:
            session['reservation_state'] = RESERVATION_STATES['COMPLETADA']
            session['reservation_data'] = {}
            save_session(from_number, session, restaurant_id)
            logger.info(f"‚úÖ Estado de reserva limpiado para {from_number}")
        
        # PRIORIDAD 1: Detecci√≥n de Feedback (M√ÅXIMA PRIORIDAD - antes que cualquier otra l√≥gica)
        # ¬°CR√çTICO! El feedback debe detectarse ANTES que el flujo de reserva activo
        if detect_and_save_feedback(from_number, message, restaurant_config):
            logger.info(f"üåü FEEDBACK: Feedback detectado y guardado para {from_number}")
            return None  # Ya se envi√≥ respuesta en la funci√≥n
        
        # PRIORIDAD 2: Verificar si hay un flujo de reserva activo (SOLO si no es un comando de interrupci√≥n)
        if reservation_state and reservation_state != RESERVATION_STATES['COMPLETADA'] and not is_interrupt_command and not is_problematic_state:
            logger.info(f"Continuando flujo de reserva activo: {reservation_state}")
            return handle_reservation_flow(from_number, message, restaurant_config, session, mensaje_normalizado)
        elif reservation_state and (is_interrupt_command or is_problematic_state):
            logger.info(f"üîÑ Comando de interrupci√≥n detectado: '{message}' - Estado anterior: {reservation_state}")
            session['reservation_state'] = RESERVATION_STATES['COMPLETADA']
            session['reservation_data'] = {}
            save_session(from_number, session, restaurant_id)
        
        def get_first_name(full_name):
            if not full_name or not isinstance(full_name, str):
                return ""
            return full_name.split(' ')[0]

        def should_use_name():
            return True

        # PRIORIDAD 2: Despedidas y agradecimientos (ANTES que cualquier otra l√≥gica)
        farewell_keywords = [
            'gracias', 'chau', 'adios', 'adi√≥s', 'hasta luego', 'nos vemos', 'bye', 'goodbye',
            'hasta la vista', 'que tengas', 'buen dia', 'buena tarde', 'buena noche',
            'muchas gracias', 'te agradezco', 'perfecto gracias', 'listo gracias',
            'ok gracias', 'genial gracias', 'excelente gracias', 'barbaro gracias'
        ]
        
        # Detectar despedidas con mayor precisi√≥n
        is_farewell = False
        
        # IMPORTANTE: No detectar como despedida si el mensaje contiene una calificaci√≥n num√©rica (1-5)
        # ya que puede ser feedback que incluye "gracias"
        import re
        tiene_calificacion = re.search(r'^([1-5])\b', mensaje_normalizado)
        
        if not tiene_calificacion:  # Solo verificar despedidas si NO hay calificaci√≥n
            for keyword in farewell_keywords:
                if keyword in mensaje_normalizado:
                    # Verificar que sea realmente una despedida y no parte de otra consulta
                    if any(word in mensaje_normalizado for word in ['gracias', 'chau', 'adios', 'adi√≥s', 'bye']):
                        # Verificar que no sea un feedback con palabras positivas
                        feedback_indicators = ['sistema', 'gustado', 'bueno', 'excelente', 'malo', 'regular']
                        if not any(indicator in mensaje_normalizado for indicator in feedback_indicators):
                            is_farewell = True
                            break
        
        if is_farewell:
            logger.info(f"üëã DESPEDIDA: Detectada despedida en: '{message}'")
            
            # Intentar obtener nombre desde la sesi√≥n actual primero
            nombre_usuario = get_first_name(session.get('nombre_cliente', ''))
            
            # Si no hay nombre en sesi√≥n, buscar en reservas previas
            if not nombre_usuario:
                nombre_usuario = get_known_user_name(from_number)
            
            # Respuestas de despedida variadas y c√°lidas
            if nombre_usuario and should_use_name():
                # Despedidas personalizadas para usuarios conocidos
                despedidas = [
                    f"¬°Gracias {nombre_usuario}! Que tengas un hermoso d√≠a üòä",
                    f"¬°Un placer haberte ayudado, {nombre_usuario}! Que disfrutes mucho üåü",
                    f"¬°Hasta pronto {nombre_usuario}! Esperamos verte en {restaurant_name} üòä",
                    f"¬°Gracias por escribirnos, {nombre_usuario}! Que tengas un excelente d√≠a ‚ú®",
                    f"¬°Nos vemos pronto, {nombre_usuario}! Cualquier cosa que necesites, ac√° estamos ü§ó"
                ]
            else:
                # Despedidas est√°ndar para usuarios nuevos
                despedidas = [
                    f"¬°Gracias! Que tengas un hermoso d√≠a üòä",
                    f"¬°Un placer haberte ayudado! Que disfrutes mucho üåü",
                    f"¬°Hasta pronto! Esperamos verte en {restaurant_name} üòä",
                    f"¬°Gracias por escribirnos! Que tengas un excelente d√≠a ‚ú®",
                    f"¬°Nos vemos! Cualquier cosa que necesites, ac√° estamos ü§ó"
                ]
            
            despedida_personal = random.choice(despedidas)
            send_whatsapp_message(from_number, despedida_personal, restaurant_config)
            logger.info(f"‚úÖ Despedida {'personalizada' if nombre_usuario else 'est√°ndar'} enviada a {from_number}")
            return None

        # PRIORIDAD 3: Manejar saludos (SOLO si no hay otras intenciones espec√≠ficas)
        saludos = ['hola', 'buenos dias', 'buenas tardes', 'buenas noches', 'que tal', 'como estas', 'hello', 'hi']
        es_solo_saludo = mensaje_normalizado in saludos or any(saludo in mensaje_normalizado for saludo in saludos)

        if es_solo_saludo:
            logger.info(f"üëã SALUDO: Detectado saludo simple '{message}' de {from_number}")
            
            # Intentar obtener nombre desde la sesi√≥n actual primero
            nombre_usuario = get_first_name(session.get('nombre_cliente', ''))
            
            # Si no hay nombre en sesi√≥n, buscar en reservas previas
            if not nombre_usuario:
                nombre_usuario = get_known_user_name(from_number)
            
            # Crear saludo personalizado seg√∫n si el usuario es conocido o no
            if nombre_usuario and should_use_name():
                # Usuario conocido - saludo m√°s c√°lido y personal
                saludos_conocidos = [
                    f"¬°Hola {nombre_usuario}! Qu√© bueno saber de ti nuevamente üòä",
                    f"¬°{nombre_usuario}! Me alegra verte por aqu√≠ otra vez üåü",
                    f"¬°Hola {nombre_usuario}! Bienvenido de vuelta a {restaurant_name} üòä",
                    f"¬°{nombre_usuario}! Qu√© placer tenerte nuevamente con nosotros ü§ó"
                ]
                saludo_personalizado = random.choice(saludos_conocidos)
                bienvenida = f"{saludo_personalizado}\n\n¬øEn qu√© podemos ayudarte hoy?\n\nPuedes escribir:\n‚û°Ô∏è *Reservar* - para hacer una nueva reserva\n‚û°Ô∏è *Menu* - para ver nuestro men√∫\n‚û°Ô∏è *Ubicacion* - para saber d√≥nde encontrarnos"
            else:
                # Usuario nuevo - saludo est√°ndar
                saludo_personalizado = "¬°Hola! "
                bienvenida = f"{saludo_personalizado}Bienvenido a {restaurant_name}. üòä\n\n¬øC√≥mo podemos ayudarte hoy?\n\nEscribe:\n‚û°Ô∏è *Reservar* - para hacer una reserva\n‚û°Ô∏è *Menu* - para ver nuestro men√∫\n‚û°Ô∏è *Ubicacion* - para saber d√≥nde encontrarnos"
            
            send_whatsapp_message(from_number, bienvenida, restaurant_config)
            logger.info(f"‚úÖ Saludo {'personalizado' if nombre_usuario else 'est√°ndar'} respondido a {from_number}")
            return None

        # PRIORIDAD 5: Consultas sobre Pol√≠ticas del Restaurante (ANTES que men√∫ y reservas)
        policy_keywords = [
            # Mascotas
            'mascota', 'mascotas', 'perro', 'perros', 'gato', 'gatos', 'animal', 'animales', 'pet', 'pets',
            # Ni√±os
            'ninos', 'ni√±os', 'bebe', 'beb√©', 'chico', 'chicos', 'children', 'kids', 'menores', 'familia', 'familiar',
            # Fumar
            'fumar', 'fumo', 'cigarro', 'cigarrillo', 'tabaco', 'smoke', 'smoking', 'puedo fumar', 'se puede fumar',
            'fumadores', 'zona fumadores', 'zona de fumadores',
            # Accesibilidad
            'accesibilidad', 'silla de ruedas', 'discapacidad', 'wheelchair', 'accesible',
            # Dietas (solo palabras espec√≠ficas, no gen√©ricas)
            'vegetariano', 'vegano', 'celico', 'celiaco', 'gluten', 'tacc', 'alergias', 'alergia', 'sin gluten',
            # Estacionamiento
            'estacionamiento', 'parking', 'aparcar', 'auto', 'coche', 'estacionar',
            # Espacios
            'terraza', 'patio', 'afuera', 'exterior', 'adentro', 'interior', 'salon', 'sal√≥n',
            # Vestimenta
            'vestimenta', 'dress code', 'como vestirse', 'que ropa', 'formal', 'casual', 'vestir', 'como hay que vestirse',
            # Cancelaci√≥n
            'cancelacion', 'cancelar', 'cambiar reserva', 'modificar reserva', 'pol√≠tica', 'politica',
            'politica de cancelacion', 'pol√≠tica de cancelaci√≥n',
            # Horarios y servicios (espec√≠ficos)
            'wifi', 'internet',
            # Pagos
            'pago', 'tarjeta', 'efectivo', 'mercado pago', 'transferencia', 'd√©bito', 'cr√©dito',
            # Ruido/ambiente
            'ruido', 'silencioso', 'tranquilo', 'ambiente'
        ]
        
        if any(keyword in mensaje_normalizado for keyword in policy_keywords):
            logger.info(f"üìã POL√çTICAS: Detectada consulta sobre pol√≠ticas: '{message}'")
            return handle_policy_query(from_number, message, restaurant_config)

        # PRIORIDAD 6: Consultas sobre Men√∫ (despu√©s de pol√≠ticas, palabras m√°s espec√≠ficas)
        menu_keywords = [
            'menu', 'carta', 'comida', 'platos', 'especialidades', 'precios', 'desayuno', 'almuerzo', 'cena',
            'platillos', 'cocina', 'gastronomia', 'comidas',
            'recomendacion', 'suggestions', 'que recomiendan',
            'ver menu', 'mostrar menu', 'quiero ver el menu', 'para comer',
            'pasas el menu', 'pasar menu', 'muestrame el menu'
        ]
        if any(keyword in mensaje_normalizado for keyword in menu_keywords):
            logger.info(f"üçΩÔ∏è MEN√ö: Detectada consulta de men√∫: '{message}'")
            return handle_menu_query(from_number, message, restaurant_config, session)

        # PRIORIDAD 7: Consultas sobre Ubicaci√≥n (espec√≠ficas)
        location_keywords = ['ubicacion', 'direccion', 'donde estan', 'como llego', 'localizacion', 'mapa', 'coordenadas']
        if any(keyword in mensaje_normalizado for keyword in location_keywords):
            logger.info(f"üìç UBICACI√ìN: Detectada consulta de ubicaci√≥n: '{message}'")
            return handle_location_query(from_number, message, restaurant_config)

        # PRIORIDAD 8: Sistema de Reservas Inteligente (M√ÅS ESPEC√çFICO)
        # Ahora requerimos palabras expl√≠citas de reserva, no solo n√∫meros
        palabras_reserva_exactas = ['reservar', 'reserva', 'mesa', 'lugar', 'quiero reservar', 'necesito reservar', 'hacer reserva']
        tiene_intencion_reserva_explicita = any(palabra in mensaje_normalizado for palabra in palabras_reserva_exactas)

        # Solo detectar datos de reserva si hay intenci√≥n expl√≠cita OR si es un flujo de reserva activo
        en_flujo_reserva = session.get('reservation_state', RESERVATION_STATES['INICIO']) != RESERVATION_STATES['INICIO']
        
        if tiene_intencion_reserva_explicita or en_flujo_reserva:
            logger.info(f"üéØ RESERVA: Detectada intenci√≥n expl√≠cita o flujo activo: '{message}'")
            # Limpiar estado anterior solo si no est√° en flujo activo
            if not en_flujo_reserva:
                session['reservation_state'] = RESERVATION_STATES['INICIO']
                save_session(from_number, session, restaurant_id)
            return handle_reservation_flow(from_number, message, restaurant_config, session, mensaje_normalizado)

        # PRIORIDAD 9: IA Conversacional para Todo lo Dem√°s
        return handle_ai_conversation(from_number, message, restaurant_config, session)

    except Exception as e:
        logger.error(f"‚ùå Error en handle_whatsapp_message para {from_number}: {str(e)}")
        logger.error(traceback.format_exc())
        return None

def request_feedback_after_reservation(from_number, restaurant_config, delay_minutes=2):
    """
    Solicita feedback al cliente despu√©s de un tiempo de la reserva confirmada.
    
    Args:
        from_number (str): N√∫mero de WhatsApp del cliente
        restaurant_config (dict): Configuraci√≥n del restaurante
        delay_minutes (int): Minutos a esperar antes de solicitar feedback
    """
    import threading
    import time
    
    def delayed_feedback_request():
        try:
            # Esperar el tiempo especificado
            time.sleep(delay_minutes * 60)
            
            restaurant_name = restaurant_config.get('nombre_restaurante', 'el restaurante')
            
            mensaje_feedback = f"¬°Hola! üòä\n\n"
            mensaje_feedback += f"Esperamos que hayas disfrutado de tu experiencia en {restaurant_name}.\n\n"
            mensaje_feedback += f"¬øTe gustar√≠a dejarnos tu opini√≥n? Nos ayuda mucho a mejorar:\n\n"
            mensaje_feedback += f"‚Ä¢ Puedes calificarnos del 1 al 5 (donde 5 es excelente)\n"
            mensaje_feedback += f"‚Ä¢ O simplemente contarnos c√≥mo te pareci√≥ todo\n\n"
            mensaje_feedback += f"¬°Tu opini√≥n es muy valiosa para nosotros! ‚≠ê"
            
            send_whatsapp_message(from_number, mensaje_feedback, restaurant_config)
            logger.info(f"‚úÖ Solicitud de feedback enviada a {from_number} para restaurante {restaurant_name}")
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando solicitud de feedback a {from_number}: {str(e)}")
    
    # Ejecutar en un hilo separado para no bloquear el flujo principal
    feedback_thread = threading.Thread(target=delayed_feedback_request)
    feedback_thread.daemon = True
    feedback_thread.start()

def detect_and_save_feedback(from_number, message, restaurant_config):
    """
    Detecta si un mensaje contiene feedback y lo guarda en Supabase.
    
    Args:
        from_number (str): N√∫mero de WhatsApp del cliente
        message (str): Mensaje del usuario
        restaurant_config (dict): Configuraci√≥n del restaurante
        
    Returns:
        bool: True si se detect√≥ y guard√≥ feedback, False si no
    """
    try:
        message_lower = message.lower().strip()
        logger.info(f"üîç FEEDBACK DETECTION: Analizando mensaje: '{message}'")
        
        # Detectar calificaci√≥n num√©rica (1-5) 
        import re
        # Buscar n√∫meros del 1-5 al inicio del mensaje o cerca de palabras de calificaci√≥n
        calificacion_patterns = [
            r'^([1-5])\b',  # Al inicio del mensaje
            r'^([1-5])\s',  # Al inicio seguido de espacio
            r'([1-5])\s*(?:estrellas?|puntos?|sobre\s*5|de\s*5)',  # Con contexto de calificaci√≥n
            r'(?:califico|calificaci√≥n|rating|nota|puntaje|punt√∫o).*?([1-5])',  # Despu√©s de palabras de calificaci√≥n
            r'([1-5])\s*(?:muy|me|te|le|nos|les|ha|he|hemos|han)',  # N√∫meros seguidos de palabras comunes en feedback
        ]
        
        calificacion = None
        for pattern in calificacion_patterns:
            match = re.search(pattern, message_lower)
            if match:
                calificacion = int(match.group(1))
                logger.info(f"‚úÖ FEEDBACK: Calificaci√≥n detectada con patr√≥n '{pattern}': {calificacion}")
                break
        
        # Palabras clave FUERTES que indican feedback (m√°s espec√≠ficas)
        feedback_keywords_strong = [
            'me ha gustado', 'me gusto', 'me encanto', 'me fascino', 'me parecio',
            'excelente', 'muy bueno', 'genial', 'perfecto', 'increible', 'fantastico',
            'malo', 'pesimo', 'horrible', 'terrible', 'espantoso',
            'recomiendo', 'no recomiendo', 'volveria', 'no volveria',
            'satisfecho', 'contento', 'decepcionado', 'encantado',
            'gracias por', 'muchas gracias', 'muy agradecido', 'te agradezco',
            'opinion', 'calificacion', 'estrellas', 'puntos', 'calificar',
            'servicio', 'experiencia', 'sistema', 'plataforma', 'app', 'aplicacion',
            'funciona', 'funcion√≥', 'funciono', 'me sirvio', 'me sirve',
            'esta bueno', 'esta malo', 'esta bien', 'esta genial',
            'gustado mucho', 'gust√≥ mucho', 'parecido bien', 'parecio bien'
        ]
        
        # Palabras clave D√âBILES (solo si van con calificaci√≥n o contexto fuerte)
        feedback_keywords_weak = [
            'bueno', 'regular', 'bien', 'mal', 'estuvo', 'fue'
        ]
        
        # Verificar palabras fuertes
        tiene_feedback_fuerte = any(keyword in message_lower for keyword in feedback_keywords_strong)
        
        # Verificar palabras d√©biles (solo si hay calificaci√≥n o mensaje largo)
        tiene_feedback_debil = any(keyword in message_lower for keyword in feedback_keywords_weak)
        
        # L√≥gica de detecci√≥n mejorada
        es_feedback = False
        
        if calificacion is not None:
            # Si tiene calificaci√≥n num√©rica, es muy probable que sea feedback
            if tiene_feedback_fuerte or tiene_feedback_debil or len(message.strip()) >= 5:
                es_feedback = True
                logger.info(f"‚úÖ FEEDBACK: Detectado por calificaci√≥n + contexto (calificaci√≥n: {calificacion})")
        elif tiene_feedback_fuerte:
            # Palabras fuertes son suficientes
            es_feedback = True
            logger.info(f"‚úÖ FEEDBACK: Detectado por palabras fuertes")
        elif tiene_feedback_debil and len(message.strip()) >= 15:
            # Palabras d√©biles solo si el mensaje es suficientemente largo
            es_feedback = True
            logger.info(f"‚úÖ FEEDBACK: Detectado por palabras d√©biles + longitud")
        
        # Caso especial: mensaje que empieza con n√∫mero 1-5 seguido de texto descriptivo
        if not es_feedback and re.match(r'^[1-5]\s+[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]', message):
            es_feedback = True
            logger.info(f"‚úÖ FEEDBACK: Detectado por patr√≥n 'n√∫mero + texto descriptivo'")
        
        # Excluir falsos positivos comunes (pero ser menos estricto si hay calificaci√≥n)
        false_positives = [
            'reservar', 'reserva', 'mesa', 'ubicacion', 'direccion',
            'menu', 'carta', 'hola', 'buenos dias', 'como estas',
            'personas', 'para ma√±ana', 'para hoy', 'para el', 'quiero', 'necesito'
        ]
        
        # Palabras espec√≠ficas de reserva que indican que NO es feedback
        reservation_indicators = [
            'personas', 'ma√±ana', 'hoy', 'fecha', 'reservar', 'reserva', 'mesa', 'lugar',
            'hora', 'quiero', 'necesito', 'para el', 'para hoy', 'para ma√±ana'
        ]
        
        tiene_falso_positivo = any(fp in message_lower for fp in false_positives)
        tiene_indicador_reserva = any(ri in message_lower for ri in reservation_indicators)
        
        if tiene_falso_positivo or tiene_indicador_reserva:
            # Si contiene palabras de falsos positivos o indicadores de reserva, ser MUY estricto
            if not (calificacion is not None and tiene_feedback_fuerte and len(message.strip()) >= 20):
                es_feedback = False
                logger.info(f"‚ùå FEEDBACK: Descartado por falso positivo/reserva (fp: {tiene_falso_positivo}, res: {tiene_indicador_reserva}, cal: {calificacion})")
        
        if es_feedback:
            logger.info(f"üåü FEEDBACK: ¬°Feedback v√°lido detectado! Guardando...")
            # Guardar el feedback
            success = save_feedback(from_number, message, restaurant_config, calificacion)
            
            if success:
                restaurant_name = restaurant_config.get('nombre_restaurante', 'el restaurante')
                
                # Respuesta personalizada seg√∫n el tipo de feedback
                if calificacion:
                    if calificacion >= 4:
                        respuesta = f"¬°Muchas gracias por tu calificaci√≥n de {calificacion}/5! üåü\n\n"
                        respuesta += f"Nos alegra saber que tuviste una buena experiencia en {restaurant_name}. ¬°Esperamos verte pronto de nuevo! üòä"
                    elif calificacion == 3:
                        respuesta = f"Gracias por tu calificaci√≥n de {calificacion}/5. üìù\n\n"
                        respuesta += f"Valoramos tu opini√≥n y trabajamos constantemente para mejorar. ¬°Esperamos ofrecerte una mejor experiencia la pr√≥xima vez!"
                    else:
                        respuesta = f"Gracias por tu sincera calificaci√≥n de {calificacion}/5. üôè\n\n"
                        respuesta += f"Lamentamos que tu experiencia no haya sido la esperada. Tu feedback nos ayuda a mejorar. ¬°Esperamos poder sorprenderte positivamente en el futuro!"
                else:
                    respuesta = f"¬°Muchas gracias por tomarte el tiempo de dejarnos tu opini√≥n! üôè\n\n"
                    respuesta += f"Tu feedback es muy valioso para {restaurant_name} y nos ayuda a seguir mejorando. ¬°Esperamos verte pronto!"
                
                send_whatsapp_message(from_number, respuesta, restaurant_config)
                logger.info(f"‚úÖ Feedback guardado y respuesta enviada a {from_number}")
                return True
            else:
                logger.error(f"‚ùå FEEDBACK: Error guardando feedback para {from_number}")
                return False
        else:
            logger.info(f"‚ùå FEEDBACK: No se detect√≥ feedback v√°lido en: '{message}'")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Error detectando/guardando feedback de {from_number}: {str(e)}")
        return False