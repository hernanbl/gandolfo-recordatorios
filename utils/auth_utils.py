"""
Utilidades de autenticaci√≥n robustas para Supabase
Manejan diferencias entre versiones de la librer√≠a
"""


def robust_supabase_auth(supabase_client, email, password):
    """
    Funci√≥n robusta que funciona tanto en local como en producci√≥n
    Intenta primero sign_in_with_password, luego sign_in, luego sign_in_with_email
    """
    # Log m√©todos disponibles para debugging
    available_methods = [m for m in dir(supabase_client.auth) if not m.startswith('_')]
    print(f"üîç M√©todos disponibles en cliente auth: {available_methods}")
    
    # OPCI√ìN 1: M√©todo que funciona en versiones recientes
    if hasattr(supabase_client.auth, 'sign_in_with_password'):
        try:
            print("üîß Usando sign_in_with_password (versi√≥n nueva)")
            return supabase_client.auth.sign_in_with_password({
                "email": email,
                "password": password
            })
        except Exception as e:
            print(f"‚ö†Ô∏è sign_in_with_password fall√≥: {str(e)}")
    
    # OPCI√ìN 2: M√©todo que funciona en local (0.7.1)
    if hasattr(supabase_client.auth, 'sign_in'):
        try:
            print("üîß Usando sign_in (versi√≥n 0.7.1)")
            return supabase_client.auth.sign_in(
                email=email,
                password=password
            )
        except Exception as e:
            print(f"‚ö†Ô∏è sign_in fall√≥: {str(e)}")
    
    # OPCI√ìN 3: M√©todo para versiones muy antiguas
    if hasattr(supabase_client.auth, 'sign_in_with_email'):
        try:
            print("üîß Usando sign_in_with_email (versi√≥n antigua)")
            return supabase_client.auth.sign_in_with_email(email, password)
        except Exception as e:
            print(f"‚ö†Ô∏è sign_in_with_email fall√≥: {str(e)}")
    
    # Si llegamos aqu√≠, ning√∫n m√©todo funcion√≥
    print(f"‚ùå No se encontr√≥ m√©todo de autenticaci√≥n v√°lido. M√©todos disponibles: {available_methods}")
    raise Exception("Ning√∫n m√©todo de autenticaci√≥n disponible")

